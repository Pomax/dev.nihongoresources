<?php

class Lookup
{
  var $nullstring = "randomstringthatisneversearchedon";

  // the number of strokes for each bushu, including variations
  var $radstrokes = array("1" => "1", "2" => "1", "3" => "1", "4" => "1", "5" => "1", "5" => "1", "6" => "1",
          "7" => "2", "8" => "2", "9" => "2", "10" => "2", "11" => "2", "12" => "2", "13" => "2",
          "14" => "2", "15" => "2", "16" => "2", "17" => "2", "18" => "2", "19" => "2", "20" => "2",
          "21" => "2", "22" => "2", "23" => "2", "24" => "2", "25" => "2", "26" => "2", "27" => "2",
          "28" => "2", "29" => "2", "30" => "3", "31" => "3", "32" => "3", "33" => "3", "34" => "3",
          "35" => "3", "36" => "3", "37" => "3", "38" => "3", "39" => "3", "40" => "3", "41" => "3",
          "42" => "3", "43" => "3", "44" => "3", "45" => "3", "46" => "3", "47" => "3", "48" => "3",
          "49" => "3", "50" => "3", "51" => "3", "52" => "3", "53" => "3", "54" => "3", "55" => "3",
          "56" => "3", "57" => "3", "58" => "3", "59" => "3", "60" => "3", "61" => "4", "61b" => "3",
          "62" => "4", "63" => "4", "64" => "4", "64b" => "3", "65" => "4", "66" => "4", "67" => "4",
          "68" => "4", "69" => "4", "70" => "4", "71" => "4", "72" => "4", "72" => "4", "73" => "4",
          "74" => "4", "75" => "4", "76" => "4", "77" => "4", "78" => "4", "79" => "4", "80" => "4",
          "80b" => "5", "81" => "4", "82" => "4", "83" => "4", "84" => "4", "85" => "4", "85b" => "3",
          "85c" => "5", "86" => "4", "87" => "4", "88" => "4", "89" => "4", "90" => "4", "91" => "4",
          "92" => "4", "93" => "4", "93" => "4", "94" => "4", "94b" => "3", "95" => "5", "96" => "5",
          "96b" => "4", "97" => "5", "98" => "5", "99" => "5", "100" => "5", "101" => "5", "102" => "5",
          "103" => "5", "104" => "5", "105" => "5", "106" => "5", "107" => "5", "108" => "5", "109" => "5",
          "110" => "5", "111" => "5", "112" => "5", "113" => "5", "113" => "5", "114" => "5", "115" => "5",
          "116" => "5", "117" => "5", "118" => "6", "119" => "6", "120" => "6", "121" => "6", "122" => "6",
          "122b" => "5", "122c" => "4", "123" => "6", "124" => "6", "125" => "6", "126" => "6", "127" => "6",
          "128" => "6", "129" => "6", "130" => "6", "130b" => "4", "131" => "6", "132" => "6", "133" => "6",
          "134" => "6", "135" => "6", "136" => "6", "137" => "6", "138" => "6", "139" => "6", "140" => "6",
          "141" => "6", "142" => "6", "143" => "6", "144" => "6", "145" => "6", "145" => "6", "146" => "6",
          "146" => "6", "147" => "7", "148" => "7", "149" => "7", "150" => "7", "151" => "7", "152" => "7",
          "153" => "7", "154" => "7", "155" => "7", "156" => "7", "157" => "7", "158" => "7", "159" => "7",
          "160" => "7", "161" => "7", "162" => "2", "162b" => "3", "163" => "7", "163b" => "2", "164" => "7",
          "165" => "7", "165b" => "8", "166" => "7", "167" => "8", "168" => "8", "168b" => "7", "169" => "8",
          "170" => "8", "170b" => "2", "171" => "8", "172" => "8", "173" => "8", "174" => "8", "175" => "8",
          "176" => "9", "176b" => "8", "177" => "9", "178" => "9", "179" => "9", "180" => "9", "181" => "9",
          "182" => "9", "183" => "9", "184" => "9", "185" => "9", "186" => "9", "187" => "10", "188" => "10",
          "189" => "10", "189b" => "11", "190" => "10", "191" => "10", "192" => "10", "193" => "10",
          "194" => "10", "195" => "11", "196" => "11", "197" => "11", "198" => "11", "199" => "11",
          "199b" => "7", "200" => "11", "201" => "12", "202" => "12", "203" => "12", "203b" => "11",
          "204" => "12", "205" => "13", "206" => "13", "207" => "14", "207" => "14", "208" => "14",
          "209" => "14", "210" => "14", "210b" => "8", "211" => "15", "211b" => "13", "212" => "16",
          "212b" => "10", "213" => "16", "213b" => "11", "214" => "17");

  var $bushu = array("", "一", "｜", "丶", "ノ", "乙 (&#20058;)", "亅", "二", "亠", "人 (イ)", "儿","入", "八", "冂", "冖",
        "冫", "几", "凵", "刀 (&#20994;)", "力", "勹", "匕", "匚", "匸", "十", "卜", "卩", "厂", "厶", "又",
        "口", "囗", "土", "士", "夂", "夊", "夕", "大", "女", "子", "宀", "寸", "小", "尢", "尸", "屮", "山",
        "川 (巛)", "工", "己 (已/巳)", "巾", "干", "幺", "广", "廴", "廾", "弋", "弓", "&#24400 (彑)", "彡",
        "彳", "心 (&#24516;)", "戈", "戸", "手 (&#25164;)", "支", "攵 (夂)", "文", "斗", "斤", "方", "无",
        "日 (曰)", "曰", "月", "木", "欠", "止", "歹", "殳", "&#27596; (母)", "比", "毛", "氏", "气",
        "水 (&#27701;/&#27706;)", "火 (&#28780;)", "爪 (&#29227;)", "父", "爻", "爿", "片", "牙", "牛 (&#29276;)",
        "犬 (&#29357;)", "玄", "玉 (王/壬)", "瓜", "瓦", "甘", "生", "用", "田", "疋", "&#30098;", "癶", "白", "皮",
        "皿", "目", "矛", "矢", "石", "示 (ネ)", "&#31160;", "禾", "穴", "立", "竹", "米", "糸", "缶",
        "&#32593; (&#32594;/&#32595;)", "羊", "羽", "老", "而", "耒", "耳", "聿", "肉 (月)", "臣", "自", "至",
        "臼", "舌", "舛", "舟", "艮", "色", "艸", "虍", "虫", "血", "行", "衣 (&#34916;)", "西 (&#35198;)", "見",
        "角", "言", "谷", "豆", "豕", "豸", "貝", "赤", "走", "足", "身", "車", "辛", "辰", "&#36789; (&#36790;)",
        "邑 ( &nbsp;&#38429;)", "酉", "釆 (采)", "里", "金", "長 (&#38264;)", "門", "阜 (&#38429; &nbsp;)", "隶",
        "隹", "雨", "青 (靑)", "非", "面 (&#38755;)", "革", "韋", "韭", "音", "頁", "風", "飛", "食", "首", "香",
        "馬", "骨", "高 (&#39641;)", "髟", "鬥", "鬯", "鬲", "鬼", "魚", "鳥", "鹵", "鹿", "麥 (麦)", "麻", "黄",
        "黍", "黑 (黒)", "黹", "黽", "鼎", "鼓 (&#40724;)", "鼠", "鼻", "齊 (斉)", "齒 (歯)", "龍 (竜)", "龜 (亀)", "龠");

  // all characters one might find in a romanised word
  var $romajicharacters = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',' ','.','-','/',"'");

  // all character sequences that would not be found at the start or in a romanised japanese word
  var $illegalromajisequences = array('/ca.*/','/ci.*/','/cu.*/','/ce.*/','/co.*/','/l.*/','/q.*/','/x.*/','/yi.*/','/ye.*/','/wi.*/','/wu.*/','/we.*/'
      ,'/bc.*/','/bd.*/','/bf.*/','/bg.*/','/bh.*/','/bj.*/','/bk.*/','/bl.*/','/bm.*/','/bn.*/','/bp.*/','/bq.*/','/br.*/','/bs.*/','/bt.*/','/bv.*/'
      ,'/bw.*/','/bx.*/','/bz.*/','/cb.*/','/cd.*/','/cf.*/','/cg.*/','/cj.*/','/ck.*/','/cl.*/','/cm.*/','/cn.*/','/cp.*/','/cq.*/'
      ,'/cr.*/','/cs.*/','/ct.*/','/cv.*/','/cw.*/','/cx.*/','/cy.*/','/cz.*/','/db.*/','/dc.*/','/df.*/','/dg.*/','/dh.*/','/dj.*/','/dk.*/','/dl.*/'
      ,'/dm.*/','/dn.*/','/dp.*/','/dq.*/','/dr.*/','/ds.*/','/dt.*/','/dv.*/','/dw.*/','/dx.*/','/fb.*/','/fc.*/','/fd.*/','/fg.*/','/fh.*/','/fj.*/'
      ,'/fk.*/','/fl.*/','/fm.*/','/fn.*/','/fp.*/','/fq.*/','/fr.*/','/fs.*/','/ft.*/','/fv.*/','/fw.*/','/fx.*/','/fy.*/','/fz.*/','/gb.*/','/gc.*/'
      ,'/gd.*/','/gf.*/','/gh.*/','/gj.*/','/gk.*/','/gl.*/','/gm.*/','/gn.*/','/gp.*/','/gq.*/','/gr.*/','/gs.*/','/gt.*/','/gv.*/','/gw.*/','/gv.*/'
      ,'/gz.*/','/hb.*/','/hc.*/','/hd.*/','/hf.*/','/hg.*/','/hj.*/','/hk.*/','/hl.*/','/hm.*/','/hn.*/','/hp.*/','/hq.*/','/hr.*/','/hs.*/'
      ,'/ht.*/','/hv.*/','/hw.*/','/hx.*/','/hz.*/','/jb.*/','/jc.*/','/jd.*/','/jf.*/','/jg.*/','/jh.*/','/jk.*/','/jl.*/','/jm.*/','/jn.*/'
      ,'/jp.*/','/jq.*/','/jr.*/','/js.*/','/jt.*/','/jv.*/','/jw.*/','/jx.*/','/jy.*/','/jz.*/','/kb.*/','/kc.*/','/kd.*/','/kf.*/','/kg.*/','/kh.*/'
      ,'/kj.*/','/kl.*/','/km.*/','/kn.*/','/kp.*/','/kq.*/','/kr.*/','/ks.*/','/kt.*/','/kv.*/','/kw.*/','/kx.*/','/kz.*/','/lb.*/','/lc.*/'
      ,'/ld.*/','/lf.*/','/lg.*/','/lh.*/','/lj.*/','/lk.*/','/lm.*/','/ln.*/','/lp.*/','/lq.*/','/lr.*/','/ls.*/','/lt.*/','/lv.*/','/lw.*/','/lx.*/'
      ,'/ly.*/','/lz.*/','/mc.*/','/md.*/','/mf.*/','/mg.*/','/mh.*/','/mj.*/','/mk.*/','/ml.*/','/mn.*/','/mq.*/','/mr.*/','/ms.*/'
      ,'/mv.*/','/mw.*/','/mx.*/','/mz.*/','/pb.*/','/pc.*/','/pd.*/','/pf.*/','/pg.*/','/ph.*/','/pj.*/','/pk.*/','/pl.*/','/pm.*/'
      ,'/pn.*/','/pq.*/','/pr.*/','/ps.*/','/pt.*/','/pv.*/','/pw.*/','/px.*/','/pz.*/','/qb.*/','/qc.*/','/qd.*/','/qf.*/','/qg.*/','/qh.*/'
      ,'/qj.*/','/qk.*/','/ql.*/','/qm.*/','/qn.*/','/qp.*/','/qr.*/','/qs.*/','/qt.*/','/qv.*/','/qw.*/','/qx.*/','/qy.*/','/qz.*/','/rb.*/','/rc.*/'
      ,'/rd.*/','/rf.*/','/rg.*/','/rh.*/','/rj.*/','/rk.*/','/rl.*/','/rm.*/','/rn.*/','/rp.*/','/rq.*/','/rs.*/','/rt.*/','/rv.*/','/rw.*/','/rx.*/'
      ,'/rz.*/','/sb.*/','/sc.*/','/sd.*/','/sf.*/','/sg.*/','/sj.*/','/sk.*/','/sl.*/','/sm.*/','/sn.*/','/sp.*/','/sq.*/','/sr.*/','/st.*/'
      ,'/sv.*/','/sw.*/','/sx.*/','/sy.*/','/sz.*/','/tb.*/','/td.*/','/tf.*/','/tg.*/','/th.*/','/tj.*/','/tk.*/','/tl.*/','/tm.*/','/tn.*/','/tp.*/'
      ,'/tq.*/','/tr.*/','/tv.*/','/tw.*/','/tx.*/','/ty.*/','/tz.*/','/vb.*/','/vc.*/','/vd.*/','/vf.*/','/vg.*/','/vh.*/','/vj.*/','/vk.*/'
      ,'/vl.*/','/vm.*/','/vn.*/','/vp.*/','/vq.*/','/vr.*/','/vs.*/','/vt.*/','/vw.*/','/vx.*/','/vy.*/','/vz.*/','/wb.*/','/wc.*/','/wd.*/','/wf.*/'
      ,'/wg.*/','/wh.*/','/wj.*/','/wk.*/','/wl.*/','/wm.*/','/wn.*/','/wp.*/','/wq.*/','/wr.*/','/ws.*/','/wt.*/','/wv.*/','/wx.*/','/wy.*/','/wz.*/'
      ,'/xb.*/','/xc.*/','/xd.*/','/xf.*/','/xg.*/','/xh.*/','/xj.*/','/xk.*/','/xl.*/','/xm.*/','/xn.*/','/xp.*/','/xq.*/','/xr.*/','/xs.*/','/xt.*/'
      ,'/xv.*/','/xw.*/','/xy.*/','/xz.*/','/yb.*/','/yc.*/','/yd.*/','/yf.*/','/yg.*/','/yh.*/','/yj.*/','/yk.*/','/yl.*/','/ym.*/','/yn.*/','/yp.*/'
      ,'/yq.*/','/yr.*/','/ys.*/','/yt.*/','/yv.*/','/yw.*/','/yx.*/','/yz.*/','/zb.*/','/zc.*/','/zd.*/','/zf.*/','/zg.*/','/zh.*/','/zj.*/','/zk.*/'
      ,'/zl.*/','/zm.*/','/zn.*/','/zp.*/','/zq.*/','/zr.*/','/zs.*/','/zt.*/','/zv.*/','/zw.*/','/zx.*/','/zy.*/',
      '/nn$/');

  // all characters that would not be found at the end of a romanised japanese word
  var $illegalromajicharacters = array('/b$/','/c$/','/d$/','/f$/','/g$/','/h$/','/j$/','/k$/','/l$/','/m$/','/p$/','/q$/','/r$/','/s$/','/t$/','/v$/','/w$/','/x$/','/y$/','/z$/');


//: hiragana

  // all characters one might find in a word written in hiragana
  var $hiraganacharacters = array(  "あ", "い", "う", "え", "お",
              "ぁ", "ぃ", "ぅ", "ぇ", "ぉ",  // subscript vowels
              "か", "き", "く", "け", "こ",
              "が", "ぎ", "ぐ", "げ", "ご",
              "さ", "し", "す", "せ", "そ",
              "ざ", "じ", "ず", "ぜ", "ぞ",
              "た", "ち", "つ", "て", "と",
              "だ", "ぢ", "づ", "で", "ど",
              "な", "に", "ぬ", "ね", "の",
              "は", "ひ", "ふ", "へ", "ほ",
              "ば", "び", "ぶ", "べ", "ぼ",
              "ぱ", "ぴ", "ぷ", "ぺ", "ぽ",
              "ま", "み", "む", "め", "も",
              "や", "ゆ", "よ",
              "ゃ", "ゅ", "ょ",    // subscript glides
              "ら", "り", "る", "れ", "ろ",
              "わ", "を",
              "ん",
              "っ","ー", "・", "…","！","、","。",
              "*", "＊","?","？");


//: katakana

  // all characters one might find in a word written in katakana
  var $katakanacharacters = array(  "ア", "イ", "ウ", "エ", "オ",
              "ァ", "ィ", "ゥ", "ェ", "ォ",  // subscript vowels
              "カ", "キ", "ク", "ケ", "コ",
              "ガ", "ギ", "グ", "ゲ", "ゴ",
              "サ", "シ", "ス", "セ", "ソ",
              "ザ", "ジ", "ズ", "ゼ", "ゾ",
              "タ", "チ", "ツ", "テ", "ト",
              "ダ", "ヂ", "ヅ", "デ", "ド",
              "ナ", "ニ", "ヌ", "ネ", "ノ",
              "ハ", "ヒ", "フ", "ヘ", "ホ",
              "バ", "ビ", "ブ", "ベ", "ボ",
              "パ", "ピ", "プ", "ペ", "ポ",
              "マ", "ミ", "ム", "メ", "モ",
              "ヤ", "ユ", "ヨ",
              "ャ", "ュ", "ョ",    // subscript glides
              "ラ", "リ", "ル", "レ", "ロ",
              "ワ", "ヲ",
              "ン",
              "ｯ", "ー", "・", "…","！","、","。",
              "*", "＊","?","？");


//: verb forms

  var $polite_presumptive        ="polite presumptive";
  var $plain_presumptive        ="plain presumptive";
  var $polite_negative        ="polite negative";
  var $polite_negative_2      ="polite negative";
  var $plain_negative          ="plain negative";
  var $curt_negative          ="curt negative";
  var $others_desire          ="other's desire";
  var $simplified_te_ageru      ="simplified te-ageru";
  var $te_iru              ="te-iru";
  var $te_aru              ="te-aru";
  var $te_oru              ="te-oru";
  var $te_oku              ="te-oku";
  var $past_presumptive        ="past presumptive";
  var $passive            ="[ra]reru (passive or potential or honorific form)";
  var $causative            ="causative";
  var $polite              ="polite";
  var $past_hypothetical          ="past hypothetical";
  var $representative          ="representative";
  var $simplified_te_iru          ="simplified te-iru";
  var $simplified_te_oru          ="simplified te-oru";
  var $simplified_te_oku          ="simplified te-oku";
  var $desire              ="desire";
  var $impression            ="impression";
  var $way_of_doing          ="way-of-doing";
  var $pseudo_futurum          ="pseudo-futurum";
  var $negative_imperative        ="negative imperative";
  var $hypothetical          ="hypothetical";
  var $perfect            ="perfect";
  var $short_potential        ="short potential";
  var $past_tense            ="past tense";
  var $te_form            ="te-form";
  var $conjunctive          ="conjunctive";
  var $predicative          ="predicative";
  var $commanding            ="commanding";
  var $requesting            ="requesting";
  var $advising_commanding        ="advising commanding";
  var $polite_negative_presumptive  = "polite negative presumptive";
  var $plain_negative_presumptive    = "plain negative presumptive";

  // the irregular verbs suru and kuru must be checked separately
  var $suruforms = array();
  var $kuruforms = array();
  var $ikuforms = array();

  // rentaikei endings
  var $verb_types = array("v5u","v5k","v5g","v5s","v5t","v5m","v5b","v5n","v5r","v1");
  var $verb_endings = array("う","く","ぐ","す","つ","む","ぶ","ぬ","る","る");
  var $illegal_verb_endings = array("っう","っく","っぐ","っす","っつ","っむ","っぶ","っぬ","っる","っる");

  var $conjugation_forms = array();

  // FIXME: add in o+renyoukei+suru forms?
  function Lookup()
  {
    $this->suruforms = array(  $this->polite_presumptive      =>  "するでしょう",
                  $this->plain_presumptive      =>  "するだろう",
                  $this->polite_negative        =>  "しません",
                  $this->others_desire        =>  "したがる",
                  $this->simplified_te_ageru      =>  "したげる",
                  $this->te_iru            =>  "している",
                  $this->te_aru            =>  "してある",
                  $this->te_oru            =>  "しておる",
                  $this->past_presumptive        =>  "したろう",
                  $this->passive            =>  "される",
                  $this->passive            =>  "せられる",
                  $this->causative          =>  "させる",
                  $this->causative          =>  "さす",
                  $this->plain_negative        =>  "しない",
                  $this->polite            =>  "します",
                  $this->past_hypothetical        =>  "したら",
                  $this->representative        =>  "したり",
                  $this->simplified_te_iru        =>  "してる",
                  $this->simplified_te_oru        =>  "しとる",
                  $this->simplified_te_oku        =>  "しとく",
                  $this->desire            =>  "したい",
                  $this->impression          =>  "しそう",
                  $this->way_of_doing          =>  "しかた",
                  $this->polite_negative_presumptive   =>  "しないだろう",
                  $this->plain_negative_presumptive   =>  "するまい",
                  $this->pseudo_futurum        =>  "しよう",
                  $this->negative_imperative      =>  "するな",
                  $this->hypothetical          =>  "すれば",
                  $this->perfect            =>  "せず",
                  $this->curt_negative         =>  "せん",
                  $this->short_potential        =>  "できる",
                  $this->past_tense          =>  "した",
                  $this->te_form            =>  "して",
                  $this->conjunctive          =>  "し",
                  $this->predicative          =>  "する",
                  $this->commanding          =>  "しろ",
                  $this->requesting          =>  "してください",
                  $this->advising_commanding      =>  "せよ");

    $this->kuruforms = array(  $this->passive => "こられる",
                  $this->causative => "こさせる",
                  $this->plain_negative => "こない",
                  $this->pseudo_futurum => "こよう",
                  $this->perfect => "こず",
                  $this->curt_negative => "こん",
                  $this->commanding => "こい",
                  $this->advising_commanding => "こよ");

    $this->ikuforms  = array(  $this->te_form => "いって",
                  $this->simplified_te_iru => "いってる",
                  $this->te_iru => "いっている",
                  $this->te_aru => "いってある",
                  $this->simplified_te_oku => "いっとく",
                  $this->te_oku => "いっておく",
                  $this->simplified_te_ageru => "いったげる",
                  $this->past_tense => "いった",
                  $this->past_hypothetical => "いったら",
                  $this->representative => "いったり",
                  $this->past_presumptive => "いったろう");

    // the conjugations are ordered in such a way that when run in sequence they lead to proper deconstruction
    $this->conjugation_forms = array(
      $this->polite_negative_presumptive   => array("わないだろう","かないだろう","がないだろう","さないだろう","たないだろう","まないだろう","ばないだろう","なないだろう","らないだろう","ないだろう"),
      $this->polite_presumptive      => array("うでしょう","くでしょう","ぐでしょう","すでしょう","つでしょう","むでしょう","ぶでしょう","ぬでしょう","るでしょう","るでしょう"),
      $this->polite_negative        => array("いません","きません","ぎません","しません","ちません","みません","びません","にません","りません","ません"),
      $this->polite_negative_2      => array("いませぬ","きませぬ","ぎませぬ","しませぬ","ちませぬ","みませぬ","びませぬ","にませぬ","りませぬ","ませぬ"),
      $this->others_desire        => array("いたがる","きたがる","ぎたがる","したがる","ちたがる","みたがる","びたがる","にたがる","りたがる","たがる"),
      $this->simplified_te_ageru      => array("ったげる","いたげる","いだげる","したげる","ったげる","んだげる","んだげる","んだげる","ったげる","たげる"),
      $this->te_iru            => array("っている","いている","いでいる","している","っている","んでいる","んでいる","んでいる","っている","ている"),
      $this->te_aru            => array("ってある","いてある","いである","してある","ってある","んである","んである","んである","ってある","てある"),
      $this->te_oru            => array("っておる","いておる","いでおる","しておる","っておる","んでおる","んでおる","んでおる","っておる","ておる"),
      $this->te_oku              => array("っておく","いておく","いでおく","しておく","っておく","んでおく","んでおく","んでおく","っておく","ておく"),
      $this->plain_presumptive      => array("うだろう","くだろう","ぐだろう","すだろう","つだろう","むだろう","ぶだろう","ぬだろう","るだろう","るだろう"),
      $this->past_presumptive        => array("ったろう","いたろう","いだろう","したろう","ったろう","んだろう","んだろう","んだろう","った","たろう"),
      $this->passive            => array("われる","かれる","がれる","される","たれる","まれる","ばれる","なれる","られる","られる"),
      $this->causative          => array("わせる","かせる","がせる","させる","たせる","ませる","ばせる","なせる","らせる","させる"),
      $this->way_of_doing          => array("いかた","きかた","ぎかた","しかた","ちかた","みかた","びかた","にかた","りかた","かた"),
      $this->plain_negative        => array("わない","かない","がない","さない","たない","まない","ばない","なない","らない","ない"),
      $this->plain_negative_presumptive   => array("うまい","くまい","ぐまい","すまい","つまい","むまい","ぶまい","ぬまい","るまい","まい"),
      $this->polite            => array("います","きます","ぎます","します","ちます","みます","びます","にます","ります","ます"),
      $this->desire            => array("いたい","きたい","ぎたい","したい","ちたい","みたい","びたい","にたい","りたい","たい"),
      $this->simplified_te_iru        => array("ってる","いてる","いでる","してる","ってる","んでる","んでる","んでる","ってる","てる"),
      $this->past_hypothetical        => array("ったら","いたら","いだら","したら","ったら","んだら","んだら","んだら","ったら","たら"),
      $this->representative        => array("ったり","いたり","いだり","したり","ったり","んだり","んだり","んだり","ったり","たり"),
      $this->simplified_te_oru        => array("っとる","いとる","いどる","しとる","っとる","んどる","んどる","んどる","っとる","とる"),
      $this->impression          => array("いそう","きそう","ぎそう","しそう","ちそう","みそう","びそう","にそう","りそう","そう"),
      $this->simplified_te_oku        => array("っとく","いとく","いどく","しとく","っとく","んどく","んどく","んどく","っとく","とく"),
      $this->hypothetical          => array("えば","けば","げば","せば","てば","めば","べば","ねば","れば","れば"),
      $this->perfect            => array("わず","かず","がず","さず","たず","まず","ばず","なず","らず","ず"),
      $this->curt_negative          => array("わん","かん","がん","さん","たん","まん","ばん","なん","らん","ん"),
      $this->negative_imperative      => array("うな","くな","ぐな","すな","つな","むな","ぶな","ぬな","るな","るな"),
      $this->past_tense          => array("った","いた","いだ","した","った","んだ","んだ","んだ","った","た"),
      $this->te_form            => array("って","いて","いで","して","って","んで","んで","んで","って","て"),
      $this->short_potential        => array("える","ける","げる","せる","てる","める","べる","ねる","れる",""),
      $this->pseudo_futurum        => array("おう","こう","ごう","そう","とう","もう","ぼう","のう","ろう","よう"),
      $this->commanding          => array("え","け","げ","せ","て","め","べ","ね","れ","ろ"),
      $this->requesting          =>  array("ってください","いてください","いでください","してください","ってください","んでください","んでください","んでください","ってください","てください"),
      $this->conjunctive          => array("い","き","ぎ","し","ち","み","び","に","り",""),
      $this->advising_commanding      => array("","","","","","","","","","よ")
    );
  }


//: 1945 jouyou kanji

  var $jouyoukanji = array(  "　", "一", "九", "七", "二", "人", "入", "八", "力", "十", "下", "三", "千", "上", "口", "土", "夕", "大", "女", "子", "小", "山", "川", "五", "天", "中",
          "六", "円", "手", "文", "日", "月", "木", "水", "火", "犬", "王", "正", "出", "本", "右", "四", "左", "玉", "生", "田", "白", "目", "石", "立", "百", "年",
          "休", "先", "名", "字", "早", "気", "竹", "糸", "耳", "虫", "村", "男", "町", "花", "見", "貝", "赤", "足", "車", "学", "林", "空", "金", "雨", "青", "草",
          "音", "校", "森", "刀", "万", "丸", "才", "工", "弓", "内", "午", "少", "元", "今", "公", "分", "切", "友", "太", "引", "心", "戸", "方", "止", "毛", "父",
          "牛", "半", "市", "北", "古", "台", "兄", "冬", "外", "広", "母", "用", "矢", "交", "会", "合", "同", "回", "寺", "地", "多", "光", "当", "毎", "池", "米",
          "羽", "考", "肉", "自", "色", "行", "西", "来", "何", "作", "体", "弟", "図", "声", "売", "形", "汽", "社", "角", "言", "谷", "走", "近", "里", "麦", "画",
          "東", "京", "夜", "直", "国", "姉", "妹", "岩", "店", "明", "歩", "知", "長", "門", "昼", "前", "南", "点", "室", "後", "春", "星", "海", "活", "思", "科",
          "秋", "茶", "計", "風", "食", "首", "夏", "弱", "原", "家", "帰", "時", "紙", "書", "記", "通", "馬", "高", "強", "教", "理", "細", "組", "船", "週", "野",
          "雪", "魚", "鳥", "黄", "黒", "場", "晴", "答", "絵", "買", "朝", "道", "番", "間", "雲", "園", "数", "新", "楽", "話", "遠", "電", "鳴", "歌", "算", "語",
          "読", "聞", "線", "親", "頭", "曜", "顔", "丁", "予", "化", "区", "反", "央", "平", "申", "世", "由", "氷", "主", "仕", "他", "代", "写", "号", "去", "打",
          "皮", "皿", "礼", "両", "曲", "向", "州", "全", "次", "安", "守", "式", "死", "列", "羊", "有", "血", "住", "助", "医", "君", "坂", "局", "役", "投", "対",
          "決", "究", "豆", "身", "返", "表", "事", "育", "使", "命", "味", "幸", "始", "実", "定", "岸", "所", "放", "昔", "板", "泳", "注", "波", "油", "受", "物",
          "具", "委", "和", "者", "取", "服", "苦", "重", "乗", "係", "品", "客", "県", "屋", "炭", "度", "待", "急", "指", "持", "拾", "昭", "相", "柱", "洋", "畑",
          "界", "発", "研", "神", "秒", "級", "美", "負", "送", "追", "面", "島", "勉", "倍", "真", "員", "宮", "庫", "庭", "旅", "根", "酒", "消", "流", "病", "息",
          "荷", "起", "速", "配", "院", "悪", "商", "動", "宿", "帳", "族", "深", "球", "祭", "第", "笛", "終", "習", "転", "進", "都", "部", "問", "章", "寒", "暑",
          "植", "温", "湖", "港", "湯", "登", "短", "童", "等", "筆", "着", "期", "勝", "葉", "落", "軽", "運", "遊", "開", "階", "陽", "集", "悲", "飲", "歯", "業",
          "感", "想", "暗", "漢", "福", "詩", "路", "農", "鉄", "意", "様", "緑", "練", "銀", "駅", "鼻", "横", "箱", "談", "調", "橋", "整", "薬", "館", "題", "士",
          "不", "夫", "欠", "氏", "民", "史", "必", "失", "包", "末", "未", "以", "付", "令", "加", "司", "功", "札", "辺", "印", "争", "仲", "伝", "共", "兆", "各",
          "好", "成", "灯", "老", "衣", "求", "束", "兵", "位", "低", "児", "冷", "別", "努", "労", "告", "囲", "完", "改", "希", "折", "材", "利", "臣", "良", "芸",
          "初", "果", "刷", "卒", "念", "例", "典", "周", "協", "参", "固", "官", "底", "府", "径", "松", "毒", "泣", "治", "法", "牧", "的", "季", "英", "芽", "単",
          "省", "変", "信", "便", "軍", "勇", "型", "建", "昨", "栄", "浅", "胃", "祝", "紀", "約", "要", "飛", "候", "借", "倉", "孫", "案", "害", "帯", "席", "徒",
          "挙", "梅", "残", "殺", "浴", "特", "笑", "粉", "料", "差", "脈", "航", "訓", "連", "郡", "巣", "健", "側", "停", "副", "唱", "堂", "康", "得", "救", "械",
          "清", "望", "産", "菜", "票", "貨", "敗", "陸", "博", "喜", "順", "街", "散", "景", "最", "量", "満", "焼", "然", "無", "給", "結", "覚", "象", "貯", "費",
          "達", "隊", "飯", "働", "塩", "戦", "極", "照", "愛", "節", "続", "置", "腸", "辞", "試", "歴", "察", "旗", "漁", "種", "管", "説", "関", "静", "億", "器",
          "賞", "標", "熱", "養", "課", "輪", "選", "機", "積", "録", "観", "類", "験", "願", "鏡", "競", "議", "久", "仏", "支", "比", "可", "旧", "永", "句", "圧",
          "弁", "布", "刊", "犯", "示", "再", "仮", "件", "任", "因", "団", "在", "舌", "似", "余", "判", "均", "志", "条", "災", "応", "序", "快", "技", "状", "防",
          "武", "承", "価", "舎", "券", "制", "効", "妻", "居", "往", "性", "招", "易", "枝", "河", "版", "肥", "述", "非", "保", "厚", "故", "政", "査", "独", "祖",
          "則", "逆", "退", "迷", "限", "師", "個", "修", "俵", "益", "能", "容", "恩", "格", "桜", "留", "破", "素", "耕", "財", "造", "率", "貧", "基", "婦", "寄",
          "常", "張", "術", "情", "採", "授", "接", "断", "液", "混", "現", "略", "眼", "務", "移", "経", "規", "許", "設", "責", "険", "備", "営", "報", "富", "属",
          "復", "提", "検", "減", "測", "税", "程", "絶", "統", "証", "評", "賀", "貸", "貿", "過", "勢", "幹", "準", "損", "禁", "罪", "義", "群", "墓", "夢", "解",
          "豊", "資", "鉱", "預", "飼", "像", "境", "増", "徳", "慣", "態", "構", "演", "精", "総", "綿", "製", "複", "適", "酸", "銭", "銅", "際", "雑", "領", "導",
          "敵", "暴", "潔", "確", "編", "賛", "質", "興", "衛", "燃", "築", "輸", "績", "講", "謝", "織", "職", "額", "識", "護", "亡", "寸", "己", "干", "仁", "尺",
          "片", "冊", "収", "処", "幼", "庁", "穴", "危", "后", "灰", "吸", "存", "宇", "宅", "机", "至", "否", "我", "系", "卵", "忘", "孝", "困", "批", "私", "乱",
          "垂", "乳", "供", "並", "刻", "呼", "宗", "宙", "宝", "届", "延", "忠", "拡", "担", "拝", "枚", "沿", "若", "看", "城", "奏", "姿", "宣", "専", "巻", "律",
          "映", "染", "段", "洗", "派", "皇", "泉", "砂", "紅", "背", "肺", "革", "蚕", "値", "俳", "党", "展", "座", "従", "株", "将", "班", "秘", "純", "納", "胸",
          "朗", "討", "射", "針", "降", "除", "陛", "骨", "域", "密", "捨", "推", "探", "済", "異", "盛", "視", "窓", "翌", "脳", "著", "訪", "訳", "欲", "郷", "郵",
          "閉", "頂", "就", "善", "尊", "割", "創", "勤", "裁", "揮", "敬", "晩", "棒", "痛", "筋", "策", "衆", "装", "補", "詞", "貴", "裏", "傷", "暖", "源", "聖",
          "盟", "絹", "署", "腹", "蒸", "幕", "誠", "賃", "疑", "層", "模", "穀", "磁", "暮", "誤", "誌", "認", "閣", "障", "劇", "権", "潮", "熟", "蔵", "諸", "誕",
          "論", "遺", "奮", "憲", "操", "樹", "激", "糖", "縦", "鋼", "厳", "優", "縮", "覧", "簡", "臨", "難", "臓", "警", "乙", "了", "又", "与", "及", "丈", "刃",
          "凡", "勺", "互", "弔", "井", "升", "丹", "乏", "匁", "屯", "介", "冗", "凶", "刈", "匹", "厄", "双", "孔", "幻", "斗", "斤", "且", "丙", "甲", "凸", "丘",
          "斥", "仙", "凹", "召", "巨", "占", "囚", "奴", "尼", "巧", "払", "汁", "玄", "甘", "矛", "込", "弐", "朱", "吏", "劣", "充", "妄", "企", "仰", "伐", "伏",
          "刑", "旬", "旨", "匠", "叫", "吐", "吉", "如", "妃", "尽", "帆", "忙", "扱", "朽", "朴", "汚", "汗", "江", "壮", "缶", "肌", "舟", "芋", "芝", "巡", "迅",
          "亜", "更", "寿", "励", "含", "佐", "伺", "伸", "但", "伯", "伴", "呉", "克", "却", "吟", "吹", "呈", "壱", "坑", "坊", "妊", "妨", "妙", "肖", "尿", "尾",
          "岐", "攻", "忌", "床", "廷", "忍", "戒", "戻", "抗", "抄", "択", "把", "抜", "扶", "抑", "杉", "沖", "沢", "沈", "没", "妥", "狂", "秀", "肝", "即", "芳",
          "辛", "迎", "邦", "岳", "奉", "享", "盲", "依", "佳", "侍", "侮", "併", "免", "刺", "劾", "卓", "叔", "坪", "奇", "奔", "姓", "宜", "尚", "屈", "岬", "弦",
          "征", "彼", "怪", "怖", "肩", "房", "押", "拐", "拒", "拠", "拘", "拙", "拓", "抽", "抵", "拍", "披", "抱", "抹", "昆", "昇", "枢", "析", "杯", "枠", "欧",
          "肯", "殴", "況", "沼", "泥", "泊", "泌", "沸", "泡", "炎", "炊", "炉", "邪", "祈", "祉", "突", "肢", "肪", "到", "茎", "苗", "茂", "迭", "迫", "邸", "阻",
          "附", "斉", "甚", "帥", "衷", "幽", "為", "盾", "卑", "哀", "亭", "帝", "侯", "俊", "侵", "促", "俗", "盆", "冠", "削", "勅", "貞", "卸", "厘", "怠", "叙",
          "咲", "垣", "契", "姻", "孤", "封", "峡", "峠", "弧", "悔", "恒", "恨", "怒", "威", "括", "挟", "拷", "挑", "施", "是", "冒", "架", "枯", "柄", "柳", "皆",
          "洪", "浄", "津", "洞", "牲", "狭", "狩", "珍", "某", "疫", "柔", "砕", "窃", "糾", "耐", "胎", "胆", "胞", "臭", "荒", "荘", "虐", "訂", "赴", "軌", "逃",
          "郊", "郎", "香", "剛", "衰", "畝", "恋", "倹", "倒", "倣", "俸", "倫", "翁", "兼", "准", "凍", "剣", "剖", "脅", "匿", "栽", "索", "桑", "唆", "哲", "埋",
          "娯", "娠", "姫", "娘", "宴", "宰", "宵", "峰", "貢", "唐", "徐", "悦", "恐", "恭", "恵", "悟", "悩", "扇", "振", "捜", "挿", "捕", "敏", "核", "桟", "栓",
          "桃", "殊", "殉", "浦", "浸", "泰", "浜", "浮", "涙", "浪", "烈", "畜", "珠", "畔", "疾", "症", "疲", "眠", "砲", "祥", "称", "租", "秩", "粋", "紛", "紡",
          "紋", "耗", "恥", "脂", "朕", "胴", "致", "般", "既", "華", "蚊", "被", "託", "軒", "辱", "唇", "逝", "逐", "逓", "途", "透", "酌", "陥", "陣", "隻", "飢",
          "鬼", "剤", "竜", "粛", "尉", "彫", "偽", "偶", "偵", "偏", "剰", "勘", "乾", "喝", "啓", "唯", "執", "培", "堀", "婚", "婆", "寂", "崎", "崇", "崩", "庶",
          "庸", "彩", "患", "惨", "惜", "悼", "悠", "掛", "掘", "掲", "控", "据", "措", "掃", "排", "描", "斜", "旋", "曹", "殻", "貫", "涯", "渇", "渓", "渋", "淑",
          "渉", "淡", "添", "涼", "猫", "猛", "猟", "瓶", "累", "盗", "眺", "窒", "符", "粗", "粘", "粒", "紺", "紹", "紳", "脚", "脱", "豚", "舶", "菓", "菊", "菌",
          "虚", "蛍", "蛇", "袋", "訟", "販", "赦", "軟", "逸", "逮", "郭", "酔", "釈", "釣", "陰", "陳", "陶", "陪", "隆", "陵", "麻", "斎", "喪", "奥", "蛮", "偉",
          "傘", "傍", "普", "喚", "喫", "圏", "堪", "堅", "堕", "塚", "堤", "塔", "塀", "媒", "婿", "掌", "項", "幅", "帽", "幾", "廃", "廊", "弾", "尋", "御", "循",
          "慌", "惰", "愉", "惑", "雇", "扉", "握", "援", "換", "搭", "揚", "揺", "敢", "暁", "晶", "替", "棺", "棋", "棚", "棟", "款", "欺", "殖", "渦", "滋", "湿",
          "渡", "湾", "煮", "猶", "琴", "畳", "塁", "疎", "痘", "痢", "硬", "硝", "硫", "筒", "粧", "絞", "紫", "絡", "脹", "腕", "葬", "募", "裕", "裂", "詠", "詐",
          "詔", "診", "訴", "越", "超", "距", "軸", "遇", "遂", "遅", "遍", "酢", "鈍", "閑", "隅", "随", "焦", "雄", "雰", "殿", "棄", "傾", "傑", "債", "催", "僧",
          "慈", "勧", "載", "嗣", "嘆", "塊", "塑", "塗", "奨", "嫁", "嫌", "寛", "寝", "廉", "微", "慨", "愚", "愁", "慎", "携", "搾", "摂", "搬", "暇", "楼", "歳",
          "滑", "溝", "滞", "滝", "漠", "滅", "溶", "煙", "煩", "雅", "猿", "献", "痴", "睡", "督", "碁", "禍", "禅", "稚", "継", "腰", "艇", "蓄", "虞", "虜", "褐",
          "裸", "触", "該", "詰", "誇", "詳", "誉", "賊", "賄", "跡", "践", "跳", "較", "違", "遣", "酬", "酪", "鉛", "鉢", "鈴", "隔", "雷", "零", "靴", "頑", "頒",
          "飾", "飽", "鼓", "豪", "僕", "僚", "暦", "塾", "奪", "嫡", "寡", "寧", "腐", "彰", "徴", "憎", "慢", "摘", "概", "雌", "漆", "漸", "漬", "滴", "漂", "漫",
          "漏", "獄", "碑", "稲", "端", "箇", "維", "綱", "緒", "網", "罰", "膜", "慕", "誓", "誘", "踊", "遮", "遭", "酵", "酷", "銃", "銑", "銘", "閥", "隠", "需",
          "駆", "駄", "髪", "魂", "錬", "緯", "韻", "影", "鋭", "謁", "閲", "縁", "憶", "穏", "稼", "餓", "壊", "懐", "嚇", "獲", "穫", "潟", "轄", "憾", "歓", "環",
          "監", "緩", "艦", "還", "鑑", "輝", "騎", "儀", "戯", "擬", "犠", "窮", "矯", "響", "驚", "凝", "緊", "襟", "謹", "繰", "勲", "薫", "慶", "憩", "鶏", "鯨",
          "撃", "懸", "謙", "賢", "顕", "顧", "稿", "衡", "購", "墾", "懇", "鎖", "錯", "撮", "擦", "暫", "諮", "賜", "璽", "爵", "趣", "儒", "襲", "醜", "獣", "瞬",
          "潤", "遵", "償", "礁", "衝", "鐘", "壌", "嬢", "譲", "醸", "錠", "嘱", "審", "薪", "震", "錘", "髄", "澄", "瀬", "請", "籍", "潜", "繊", "薦", "遷", "鮮",
          "繕", "礎", "槽", "燥", "藻", "霜", "騒", "贈", "濯", "濁", "諾", "鍛", "壇", "鋳", "駐", "懲", "聴", "鎮", "墜", "締", "徹", "撤", "謄", "踏", "騰", "闘",
          "篤", "曇", "縄", "濃", "覇", "輩", "賠", "薄", "爆", "縛", "繁", "藩", "範", "盤", "罷", "避", "賓", "頻", "敷", "膚", "譜", "賦", "舞", "覆", "噴", "墳",
          "憤", "幣", "弊", "壁", "癖", "舗", "穂", "簿", "縫", "褒", "膨", "謀", "墨", "撲", "翻", "摩", "磨", "魔", "繭", "魅", "霧", "黙", "躍", "癒", "諭", "憂",
          "融", "慰", "窯", "謡", "翼", "羅", "頼", "欄", "濫", "履", "離", "慮", "寮", "療", "糧", "隣", "隷", "霊", "麗", "齢", "擁", "露");

  var $postags = array("MA" => "martial arts term",
                        "X" => "rude or X-rated term (not displayed in educational software)",
                        "abbr" => "abbreviation",
                        "adj-i" => "adjective (keiyoushi)",
                        "adj-na" => "adjectival nouns or quasi-adjectives (keiyodoshi)",
                        "adj-no" => "nouns which may take the genitive case particle &#39;no&#39;",
                        "adj-pn" => "pre-noun adjectival (rentaishi)",
                        "adj-t" => "&#39;taru&#39; adjective",
                        "adj-f" => "noun or verb acting prenominally",
                        "adj" => "former adjective classification (being removed)",
                        "adv" => "adverb (fukushi)",
                        "adv-to" => "adverb taking the &#39;to&#39; particle",
                        "arch" => "archaism",
                        "ateji" => "ateji (phonetic) reading",
                        "aux" => "auxiliary",
                        "aux-v" => "auxiliary verb",
                        "aux-adj" => "auxiliary adjective",
                        "Buddh" => "Buddhist term",
                        "chem" => "chemistry term",
                        "chn" => "children&#39;s language",
                        "col" => "colloquialism",
                        "comp" => "computer terminology",
                        "conj" => "conjunction",
                        "ctr" => "counter",
                        "derog" => "derogatory",
                        "eK" => "exclusively kanji",
                        "ek" => "exclusively kana",
                        "exp" => "Expressions (phrases, clauses, etc.)",
                        "fam" => "familiar language",
                        "fem" => "female term or language",
                        "food" => "food term",
                        "geom" => "geometry term",
                        "gikun" => "gikun (meaning as reading)  or jukujikun (special kanji reading)",
                        "hon" => "honorific or respectful (sonkeigo) language",
                        "hum" => "humble (kenjougo) language",
                        "iK" => "word containing irregular kanji usage",
                        "id" => "idiomatic expression",
                        "ik" => "word containing irregular kana usage",
                        "int" => "interjection (kandoushi)",
                        "io" => "irregular okurigana usage",
                        "iv" => "irregular verb",
                        "ling" => "linguistics terminology",
                        "m-sl" => "manga slang",
                        "male" => "male term or language",
                        "male-sl" => "male slang",
                        "math" => "mathematics",
                        "mil" => "military",
                        "n" => "noun (common) (futsuumeishi)",
                        "n-adv" => "adverbial noun (fukushitekimeishi)",
                        "n-suf" => "noun, used as a suffix",
                        "n-pref" => "noun, used as a prefix",
                        "n-t" => "noun (temporal) (jisoumeishi)",
                        "num" => "numeric",
                        "oK" => "word containing out-dated kanji",
                        "obs" => "obsolete term",
                        "obsc" => "obscure term",
                        "ok" => "out-dated or obsolete kana usage",
                        "on-mim" => "onomatopoeic or mimetic word",
                        "pn" => "pronoun",
                        "poet" => "poetical term",
                        "pol" => "polite (teineigo) language",
                        "pref" => "prefix",
                        "proverb" => "proverb",
                        "prt" => "particle",
                        "physics" => "physics terminology",
                        "rare" => "rare",
                        "sens" => "sensitive",
                        "sl" => "slang",
                        "suf" => "suffix",
                        "uK" => "word usually written using kanji alone",
                        "uk" => "word usually written using kana alone",
                        "v1" => "Ichidan verb",
                        "v2a-s" => "Nidan verb with &#39;u&#39; ending (archaic)",
                        "v4h" => "Yondan verb with &#39;hu/fu&#39; ending (archaic)",
                        "v4r" => "Yondan verb with &#39;ru&#39; ending (archaic)",
                        "v5" => "Godan verb (not completely classified)",
                        "v5aru" => "Godan verb - -aru special class",
                        "v5b" => "Godan verb with &#39;bu&#39; ending",
                        "v5g" => "Godan verb with &#39;gu&#39; ending",
                        "v5k" => "Godan verb with &#39;ku&#39; ending",
                        "v5k-s" => "Godan verb - Iku/Yuku special class",
                        "v5m" => "Godan verb with &#39;mu&#39; ending",
                        "v5n" => "Godan verb with &#39;nu&#39; ending",
                        "v5r" => "Godan verb with &#39;ru&#39; ending",
                        "v5r-i" => "Godan verb with &#39;ru&#39; ending (irregular verb)",
                        "v5s" => "Godan verb with &#39;su&#39; ending",
                        "v5t" => "Godan verb with &#39;tsu&#39; ending",
                        "v5u" => "Godan verb with &#39;u&#39; ending",
                        "v5u-s" => "Godan verb with &#39;u&#39; ending (special class)",
                        "v5uru" => "Godan verb - Uru old class verb (old form of Eru)",
                        "v5z" => "Godan verb with &#39;zu&#39; ending",
                        "vz" => "Ichidan verb - zuru verb (alternative form of -jiru verbs)",
                        "vi" => "intransitive verb",
                        "vk" => "Kuru verb - special class",
                        "vn" => "irregular nu verb",
                        "vr" => "irregular ru verb, plain form ends with -ri",
                        "vs" => "noun or participle which takes the aux. verb suru",
                        "vs-c" => "su verb - precursor to the modern suru",
                        "vs-s" => "suru verb - special class",
                        "vs-i" => "suru verb - irregular",
                        "kyb" => "Kyoto-ben",
                        "osb" => "Osaka-ben",
                        "ksb" => "Kansai-ben",
                        "ktb" => "Kantou-ben",
                        "tsb" => "Tosa-ben",
                        "thb" => "Touhoku-ben",
                        "tsug" => "Tsugaru-ben",
                        "kyu" => "Kyuushuu-ben",
                        "rkb" => "Ryuukyuu-ben",
                        "nab" => "Nagano-ben",
                        "vt" => "transitive verb",
                        "vulg" => "vulgar expression or word");

//:functions

  // radical retrieval by number
  function getrad($number) { return $this->bushu[$number]; }

  // See if the romaji string is real romaji or actually english: replace illegal sequences with blanks, and compare the final replaced length with the original length.
  function properromaji($string) {
    global $UTF8Functions;
    $newstring = preg_replace($this->illegalromajisequences, "", $string);
    $newstring = preg_replace($this->illegalromajicharacters, "", $newstring);
          if ($UTF8Functions->utf8_strlen($newstring) == $UTF8Functions->utf8_strlen($string)) { return true; }
          return false; }

  // recognition function
  function romajichar($char)
  {
    $sob1 = hexdec(bin2hex("A"));
    $eob1 = hexdec(bin2hex("Z"));
    $sob2 = hexdec(bin2hex("a"));
    $eob2 = hexdec(bin2hex("z"));
    $e1 = hexdec(bin2hex(" "));
    $e2 = hexdec(bin2hex("'"));
    $e3 = hexdec(bin2hex("."));
    $e4 = hexdec(bin2hex("-"));
    // wildcard characters
//    $e5 = hexdec(bin2hex("*"));
//    $e6 = hexdec(bin2hex("?"));
    $chr = hexdec(bin2hex($char));
    return $chr==$e1 || $chr==$e2 ||  $chr==$e3 || $chr==$e4 || /*$chr==$e5 || $chr == $e6 ||*/ ($sob1 <= $chr && $chr <= $eob1)  || ($sob2 <= $chr && $chr <= $eob2);
  }

  // recognition function
  function hiraganachar($char) {
    $sob = hexdec(bin2hex("ぁ"));
    $eob = hexdec(bin2hex("ん"));
    $chr = hexdec(bin2hex($char));
    // wildcard characters
    $e1 = hexdec(bin2hex("*"));
    $e2 = hexdec(bin2hex("?"));
    $e3 = hexdec(bin2hex("＊"));
    $e4 = hexdec(bin2hex("？"));
    return  $chr==$e1 || $chr==$e2 ||  $chr==$e3 || $chr==$e4 || ($sob <= $chr && $chr <= $eob); }

  // recognition function
  function katakanachar($char) {
    $sob = hexdec(bin2hex("ァ"));
    $eob = hexdec(bin2hex("ン"));
    $e1 = hexdec(bin2hex("ヴ"));  // I have no idea why this is a separate character...
    $e2 = hexdec(bin2hex("ー"));  // long vowel marker
    // wildcard characters
    $e3 = hexdec(bin2hex("*"));
    $e4 = hexdec(bin2hex("?"));
    $e5 = hexdec(bin2hex("＊"));
    $e6 = hexdec(bin2hex("？"));
    $chr = hexdec(bin2hex($char));
    return  $chr==$e1|| $chr==$e2 ||  $chr==$e3 || $chr==$e4 || $chr==$e5 || $chr==$e6 || ($sob <= $chr && $chr <= $eob); }

  // combined recognition function
  function kanachar($char) { return (hiraganachar($char) || katakanachar($char)); }

  function kanjichar($char) {
    $sob1 = hexdec(bin2hex("一"));
    $eob1 = hexdec(bin2hex("龠"))+4;  // most annoying... hex mismatches
    $sob2 = hexdec(bin2hex("朗"));    // "substitute" block
    $eob2 = hexdec(bin2hex("鶴"));
    // wildcard characters
    $e1 = hexdec(bin2hex("々"));
    $e2 = hexdec(bin2hex("*"));
    $e3 = hexdec(bin2hex("?"));
    $e4 = hexdec(bin2hex("＊"));
    $e5 = hexdec(bin2hex("？"));
    $chr = hexdec(bin2hex($char));
    return  $chr==$e1|| $chr==$e2 ||  $chr==$e3 || $chr==$e4 || $chr==$e5 || ($sob1 <= $chr && $chr <= $eob1)  || ($sob2 <= $chr && $chr <= $eob2); }

  function interpunctionchar($char) {
    $e1 = hexdec(bin2hex("々"));
    $e2 = hexdec(bin2hex("*"));
    $e3 = hexdec(bin2hex("?"));
    $e4 = hexdec(bin2hex("＊"));
    $e5 = hexdec(bin2hex("？"));
    $e6 = hexdec(bin2hex("ゝ"));
    $e7 = hexdec(bin2hex("ゞ"));
    $e8 = hexdec(bin2hex("ヽ"));
    $e9 = hexdec(bin2hex("ヾ"));
    $chr = hexdec(bin2hex($char));
    return  $chr==$e1|| $chr==$e2 ||  $chr==$e3 || $chr==$e4 || $chr==$e5 || $chr==$e6 || $chr==$e7 || $chr==$e8 || $chr==$e9;
  }

  // conversion between hiragana and katakana
  function convert_hira_to_kata($string)
  {
    return str_replace($this->hiraganacharacters, $this->katakanacharacters, $string);
  }

  // conversion between katakana and hiragana
  function convert_kata_to_hira($string)
  {
    return str_replace($this->katakanacharacters, $this->hiraganacharacters, $string);
  }

  // make sure the keyword input is safe.
  function secure_keyword($search)
  {
    $secured = str_replace("　","",trim(str_replace("\'","'",$search)));
    if(strpos($secured,"'")>-1 && strpos($secured,"n'")===false) { return $this->nullstring; }
    return $secured;
  }

//:input detection

  // detect which input method was used.
  function detectinputmethod($string) {
    global $UTF8Functions, $Lookup;
    $inputs = array("western" => false, "hira" => false, "kata" => false, "kanji" => false, "unknown" => false);
    if ($string==$this->nullstring) { $inputs["unknown"]=true; }
    else {
      for($i=0;$i<$UTF8Functions->utf8_strlen($string);$i++) {
        $char = $UTF8Functions->utf8_substr($string,$i,1);
        if ($this->romajichar($char))    { $inputs["western"] = true; }
        elseif ($this->hiraganachar($char))  { $inputs["hira"] = true;     }
        elseif ($this->katakanachar($char))  { $inputs["kata"] = true;     }
        elseif ($this->kanjichar($char))  { $inputs["kanji"] = true;    }
        else  { $inputs["unknown"] = true;} }
      if ($inputs["kanji"]) { $inputs["hira"] = false; $inputs["kata"] = false; } }  // corrective measure: words with kanji in them will never be found in the reb table, so invalidate hira and kata
    return $inputs; }

//:verb detection

  // detect potential verbs
  function detect_verb($input, $glue = ", ")
  {
    global $UTF8Functions;

    $inarray = array(array($input, "unknown","unknown"));
    $outarray = array();

    // rewrites for the five special base verbs
    $classic = preg_replace("/^(ござ)い/u","$1り",$input);
    if($input != $classic) {
      // rewrite for the yodan verb ござる
      $inarray[] = array($classic, $this->postags["v4r"],"unknown"); }
    else {
      $classic = preg_replace("/^(くださ)い/u","$1り",$classic);
      $classic = preg_replace("/^(おっしゃ)い/u","$1り",$classic);
      $classic = preg_replace("/^(いらっしゃ)い/u","$1り",$classic);
      $classic = preg_replace("/^(なさ)い/u","$1り",$classic);
      if($input != $classic) {
        // rewrites for the godan -aru verbs くださる, おっしゃる, いらっしゃる, and なさる
        $inarray[] = array($classic, $this->postags["v5aru"],"unknown"); }}

    // special case: suru, return immediately
    if (($key = array_search($input,$this->suruforms))!==false) {
      return array(array("する", $this->postags["vs-i"],$key)); }

    // special case: kuru, return immediately
    if (($key = array_search($input,$this->kuruforms))!==false) {
      return array(array("くる",$this->postags["vk"],$key)); }

    // ************************************************************
    // Iteratively expand the term until there are no more verbs derivable from it
    // ************************************************************
    while (count($inarray) >0 ) {
      $results = $this->dcvprocess($inarray, $glue);
     foreach($results as $data) { $outarray[]=$data; }
      $inarray = $results; }

    // special case: iku, add as additional "look for" verb
    if (($key = array_search($input,$this->ikuforms))!==false) {
      $outarray[] = array("いく", $this->postags["v5k-s"], $key); }

    // verb type corrections for the special verbs
    foreach($outarray as $data) {
      $verb = $data[0];
      if($verb =="ござる") { $data[1] = $this->postags["v4r"]; }
      elseif($verb == "くださる") { $data[1] = $this->postags["v5aru"]; }
      elseif($verb == "おっしゃる") { $data[1] = $this->postags["v5aru"]; }
      elseif($verb == "いらっしゃる") { $data[1] = $this->postags["v5aru"]; }
      elseif($verb == "なさる") { $data[1] = $this->postags["v5aru"]; }
    }

    // and then remove of $input from the list again
    if(count($outarray)>0) {
      $seen = array();
      foreach($outarray as $data) {
        $verb = $data[0];
        $type = $data[1];
        $key = $verb . "||" . $type;
        if(!in_array($key, $seen)) {
          $seen[] = $key;
          $inarray[] = $data; }}}
    return $inarray;
  }

  // get all matches for a complete comparison run
  function dcvprocess($inarray, $glue)
  {
    $output = array();
    foreach($inarray as $data) {
      $possibles = $this->deconstruct($data[0], $data[1], $data[2], $glue);
      foreach($possibles as $data) { $output[] = $data; }
    }
    return $output;
  }

  // match and set-expand
  function deconstruct($verb, $type, $form, $glue)
  {
    global $UTF8Functions;

    $output = array();
    $verb_strlen = $UTF8Functions->utf8_strlen($verb);
    // turn through all possible conugation suffixes
    foreach($this->conjugation_forms as $formkey => $conjugations) {
      for ($s=0; $s<count($conjugations); $s++) {
        $suffix = $conjugations[$s];
        $suffix_strlen = $UTF8Functions->utf8_strlen($suffix);
        $verb_suffix = $UTF8Functions->utf8_substr($verb, ($verb_strlen-$suffix_strlen), $suffix_strlen);

        // does the verb end in this suffix?
        if ($suffix != "" && $verb_suffix == $suffix) {
          $conjugation_suffix = $this->verb_endings[$s];
          $deduction = $UTF8Functions->utf8_substr($verb, 0, ($verb_strlen-$suffix_strlen)) . $conjugation_suffix;
          $verbtype = $this->postags[$this->verb_types[$s]];
          $verbform = ($form == "unknown") ? $formkey : $formkey . $glue . $form;
          $output[] = array($deduction, $verbtype, $verbform);
        }
      }
    }
    return $output;
  }

//:pos matching

  function posmatches($tag, $parameter)
  {
    // no filtering
    if ($parameter=="all") { return true; }

    // if the same, no need to filter
    elseif ($parameter==$tag) { return true; }

    // filter on verb
    else if ($parameter == "v" && (substr($tag,0,2) == "v1" || substr(tag,0,2) == "v5")) { return true; }
    else if ($parameter == "vu" && substr($tag,0,2) == "v5") { return true; }
    else if ($parameter == "vru" && substr($tag,0,2) == "v1") { return true; }

    // noun filtering
    elseif ($parameter == "n" && (substr($tag,0,1) == "n" || $tag = "adj-no" || $tag = "adj-na")) { return true; }

    // adjective filtering
    elseif ($parameter == "adj" && substr($tag,0,3) == "adj") { return true; }
    elseif ($parameter == "i-adj" && $tag == "adj-i") { return true; }
    elseif ($parameter == "na-adj" && $tag == "adj-na") { return true; }

    // adverb filtering
    elseif ($parameter == "adv" && substr($tag,0,3) == "adv") { return true; }

    // filtering failed!
    return false;
  }
}

$Lookup = new Lookup();
?>